name: immich-enhanced-prod

services:
  immich-server:
    build:
      context: ../immich
      dockerfile: server/Dockerfile
    extends:
      file: hwaccel.yml
      service: ${DEVICE:-cpu}
    volumes:
      - ${UPLOAD_LOCATION}/photos:/usr/src/app/upload
      - ${UPLOAD_LOCATION}/external:/external:rw,rshared
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - IMMICH_MACHINE_LEARNING_URL=http://inference-gateway:8080
    ports:
      - 32283:2283
    depends_on:
      - redis
      - database
    restart: unless-stopped

  redis:
    image: valkey/valkey:8-alpine
    healthcheck:
      test: redis-cli ping || exit 1
    ports:
      - 6379:6379
    restart: unless-stopped

  database:
    build:
      context: ../postgresql
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      TZ: "Asia/Shanghai"
    volumes:
      - ${UPLOAD_LOCATION}/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    restart: unless-stopped

  # set IMMICH_TELEMETRY_INCLUDE=all in .env to enable metrics
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-data:/prometheus
    user: "$UID:$GID"
    healthcheck:
      test: wget -qO- http://localhost:9090/-/ready || exit 1
    restart: unless-stopped

  # first login uses admin/admin
  # add data source for http://prometheus:9090 to get started
  grafana:
    image: grafana/grafana:11.6.1-ubuntu
    command: ["./run.sh", "-disable-reporting"]
    ports:
      - 31000:3000
    volumes:
      - ./grafana-data:/var/lib/grafana
    user: "$UID:$GID"
    healthcheck:
      test: curl -f http://localhost:3000/api/health || exit 1
    restart: unless-stopped

  inference-gateway:
    build:
      context: ../inference-gateway
      dockerfile: Dockerfile
    environment:
      - MT_PHOTOS_API=http://photos-ai:8060
      - MT_PHOTOS_API_KEY=mt_photos_ai_extra
    ports:
      - 8080:8080
    depends_on:
      - photos-ai
    restart: unless-stopped

  photos-ai:
    build:
      context: ../mt-photos-ai
      dockerfile: Dockerfile
      args:
        - DEVICE=${DEVICE:-cpu}
    extends:
      file: hwaccel.yml
      service: ${DEVICE:-cpu}
    environment:
      - API_AUTH_KEY=mt_photos_ai_extra
      - CLIP_MODEL=ViT-B-16
      - RECOGNITION_MODEL=buffalo_l
      - DETECTION_THRESH=0.65
    volumes:
      - ./models/clip:/app/.cache/clip
      - ./models/rapidocr:/app/.venv/lib/python3.11/site-packages/rapidocr/models/
      - ./models/insightface:/root/.insightface/models
    ports:
      - 8060:8060
    restart: unless-stopped
