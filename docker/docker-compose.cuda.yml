name: immich-enhanced-prod

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    build:
      context: ../immich
      dockerfile: server/Dockerfile
    volumes:
      - ${UPLOAD_LOCATION}/photos:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - 32283:2283
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
                - compute
                - video
    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}-cuda
    build:
      context: ../immich/machine-learning
      dockerfile: Dockerfile
      args:
        - DEVICE=cuda # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference
    ports:
      - 31003:3003
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
    restart: always

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm
    healthcheck:
      test: redis-cli ping || exit 1
    ports:
      - 6379:6379
    restart: always

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${UPLOAD_LOCATION}/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: always

  # set IMMICH_TELEMETRY_INCLUDE=all in .env to enable metrics
  immich-prometheus:
    container_name: immich_prometheus
    ports:
      - 9090:9090
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  # first login uses admin/admin
  # add data source for http://immich-prometheus:9090 to get started
  immich-grafana:
    container_name: immich_grafana
    command: ['./run.sh', '-disable-reporting']
    ports:
      - 31000:3000
    image: grafana/grafana:11.6.1-ubuntu
    volumes:
      - grafana-data:/var/lib/grafana

  inference-gateway:
    container_name: inference_gateway
    image: immich-inference-gateway:${IMMICH_VERSION:-release}
    build:
      context: ../inference-gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - immich-machine-learning
      - photos-ai

  photos-ai:
    container_name: photos_ai
    image: immich-photos-ai:${IMMICH_VERSION:-release}-cuda
    build:
      context: ../mt-photos-ai
      dockerfile: Dockerfile
    environment:
      - API_AUTH_KEY=4C22E759-8589-475E-8895-9DCB3088E2F6
      - CLIP_MODEL=ViT-B-16
      - RECOGNITION_MODEL=buffalo_l
      - DETECTION_THRESH=0.65
      - DEVICE=cuda
    volumes:
      - ./models/clip:/app/.cache/clip
      - ./models/rapidocr:/app/.venv/lib/python3.11/site-packages/rapidocr/models/
      - ./models/insightface:/root/.insightface/models
    ports:
      - 8060:8060
      
      
volumes:
  model-cache:
  prometheus-data:
  grafana-data:
